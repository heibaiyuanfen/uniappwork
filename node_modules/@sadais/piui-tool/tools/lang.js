import MergeDeep from './mergeDeep'

export const mergeDeep = MergeDeep
export const hasOwnProperty = Object.prototype.hasOwnProperty

/**
 * 判断对象是否对象类型
 * @param {*} value 进行判断的值
 * @returns {boolean} 判断的结果
 * @example
 * isObjectLike({}) //true
 * isObjectLike('a') // false
 */
export function isObjectLike(value) {
  return typeof value === 'object' && value !== null
}

/**
 * 获取对象标志
 * @param {object} value 需要获取标志的对象
 * @returns {string} 对象的标志
 * @example
 * getTag(null) // [object Null]
 * getTag(undefined) // [object Undefined]
 * getTag('a') // [object String]
 */
export function getTag(value) {
  if (value == null) {
    return value === undefined ? '[object Undefined]' : '[object Null]'
  }
  return toString.call(value)
}

/**
 * 检查对象是否一个prototype object
 * @param {*} value 接受检测的对象
 * @returns {boolean} 检测的结果，布尔值
 * @example
 * isPrototype(null) // false
 */
export function isPrototype(value) {
  const ctor = value && value.constructor
  const proto = (typeof Ctor === 'function' && ctor.prototype) || Object.prototype

  return value === proto
}

/**
 * 判断对象是否字符串
 * @param {*} value 需要判断的对象
 * @returns {boolean} 判断的结果，布尔值
 * @example
 * isString(111) // false
 * isString('aaa') / true
 */
export function isString(value) {
  const type = typeof value
  return (
    type === 'string' ||
    (type === 'object' &&
      value != null &&
      !Array.isArray(value) &&
      getTag(value) == '[object String]')
  )
}

/**
 * 判断对象是否数值类型
 * @param {*} value 需要检测的值
 * @returns {boolean} 判断的结果，布尔值
 * @example
 * isNumber(111) // true
 * isNumber('1111') // false
 */
export function isNumber(value) {
  return typeof value === 'number' || (isObjectLike(value) && getTag(value) == '[object Number]')
}

/**
 * 判断是否为对象或函数
 * @param {*} value 需要检测的值
 * @returns {boolean} 判断的结果，布尔值
 * @example
 * isObject(new Object()) // true
 * isOject(function foo() {}) // true
 * isObject(null) // false
 */
export function isObject(value) {
  const type = typeof value
  return value != null && (type === 'object' || type === 'function')
}

/**
 * 判断是否为数组
 * @param {*} value 数据
 * @returns {boolean } 判断的结果，布尔值
 * @example
 * isArray([]) // true
 * isArray(null) // false
 */
export function isArray(value) {
  return getTag(value) === '[object Array]'
}

/**
 * 判断是否为函数
 * @param {*} value 判断的值
 * @returns {boolean} 判断的结果，布尔值
 * @example
 * isString(111) // false
 * isString('aaa') / false
 * isString(function foo() {}) // true
 */
export function isFunction(value) {
  return getTag(value) === '[object Function]'
}

/**
 * 判断对象，数组是否为空
 * @param {*} value value
 * @returns {boolean} 判断结果，布尔值
 * @example
 * isEmpty(null) // true
 * isEmpty(new Set()) // true
 * isEmpty([1, 2]) // false
 */
export function isEmpty(value) {
  if (value == null) {
    return true
  }
  if (isNumber(value)) {
    return false
  }
  if (isArray(value)) {
    return !value.length
  }
  const tag = getTag(value)
  if (tag == '[object Map]' || tag == '[object Set]') {
    return !value.size
  }
  if (isPrototype(value)) {
    return !Object.keys(value).length
  }
  for (const key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false
    }
  }
  return true
}

/**
 * 深度克隆，若有集成lodash库，建议使用lodash的深拷贝
 * @param {Object} obj 对象
 * @returns {Object} 深拷贝的对象
 * @example
 * cloneDeep({a:'a'}) // {a: 'a'}副本
 */

export function cloneDeep(obj) {
  // 对常见的“非”值，直接返回原来值
  if ([null, undefined, NaN, false].includes(obj)) return obj
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    // 原始类型直接返回
    return obj
  }
  var o = isArray(obj) ? [] : {}
  for (let i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = typeof obj[i] === 'object' ? cloneDeep(obj[i]) : obj[i]
    }
  }
  return o
}

export default {
  isObjectLike,
  getTag,
  isPrototype,
  isString,
  isNumber,
  isObject,
  isArray,
  isFunction,
  isEmpty,
  cloneDeep,
  mergeDeep
}
