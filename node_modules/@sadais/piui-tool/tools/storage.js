import { encrypto, decrypto } from './xor-encrypto'

const EXPIRY_DATE = 'EXPIRY_DATE'

/**
 * 保存到缓存中
 * @param {String} storeKey 缓存键名
 * @param {Object} value 缓存值
 * @param {Date} expiryDate 过期时间
 * @param {Boolean} encrypt 是否加密
 * @example
 * setStorage('USER_INFO', {name: 'aaaa', phone: 123123231}, new Date('2022-02-02'))
 */
export function setStorage(storeKey, value, expiryDate, encrypt = false) {
  if (value === undefined || value === null) {
    return uni.removeStorageSync(storeKey)
  }
  if (encrypt) {
    const encryptData = encrypto(JSON.stringify(value))

    uni.setStorageSync(storeKey, encryptData)
  } else {
    uni.setStorageSync(storeKey, value)
  }
  if (expiryDate) {
    const timestamp = new Date(expiryDate).getTime()
    uni.setStorageSync(storeKey + '_' + EXPIRY_DATE, timestamp)
  }
}

/**
 * 获取缓存
 * @param {String} storeKey 缓存键名
 * @param {Boolean} decrypt 是否解密
 * @returns {Object} 缓存信息，若过期则为 null
 */
export function getStorage(storeKey, decrypt = false) {
  let value = uni.getStorageSync(storeKey)
  if (value) {
    // 如果缓存获取到内容，判断有没有失效
    const timestamp = uni.getStorageSync(storeKey + '_' + EXPIRY_DATE)
    // 已设置缓存时间
    const now = new Date().getTime()
    if (timestamp && now > timestamp) {
      // 如果已过期，则返回空
      value = null
    }
  }
  if (value && decrypt) {
    const decryptData = decrypto(value)
    value = JSON.parse(decryptData)
  }
  return value
}

export default {
  setStorage,
  getStorage
}
