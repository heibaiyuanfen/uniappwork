import { isString } from './lang'

const weekDayZh = ['日', '一', '二', '三', '四', '五', '六']

/**
 * 获取星期中文数组
 * @desc 返回数组形式的星期中文字
 * @return {Array} 星期中文数组
 * @example
 * const arr = getWeekDayZh() // ['日', '一', '二', '三', '四', '五', '六']
 */
export function getWeekDayZh() {
  return weekDayZh
}

/**
 * 解析日期信息
 * @desc 解析日期，返回包含年月日时分秒，时间戳等信息的对象
 * @param {Date} date 日期
 * @param {String} weekPrefix 星期前缀
 * @return {Object}
 * @example
 * parseDate(new Date('2020-02-02'))
 */
export function parseDate(date, weekPrefix = '星期') {
  if (!date) {
    date = new Date()
  }
  if (isString(date)) {
    date = date
      .replace(/[年月]/g, '-')
      .replace(/[日秒]/g, '')
      .replace(/[时分]/g, ':')

    const REGEX_PARSE = /^((\d{4})[-/.]?(\d{1,2})?[-/.]?(\d{0,2}))?[Tt\s]*((\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?)$/

    const d = date.match(REGEX_PARSE) || []
    const now = new Date()
    const targetDate = new Date(
      d[2] || now.getFullYear(),
      !d[3] || d[3] - 1 === '' ? now.getMonth() : d[3] - 1,
      d[4] || now.getDate()
    )

    d[6] && targetDate.setHours(d[6])
    d[7] && targetDate.setMinutes(d[7])
    d[8] && targetDate.setSeconds(d[8])
    d[9] && targetDate.setMilliseconds(d[9].substring(0, 3))
    date = targetDate
  }

  return {
    year: date.getFullYear(), // 年份
    month: date.getMonth() + 1, // 月份
    date: date.getDate(), // 当前日(1-31)
    day: date.getDay(), // 当前星期X(0-6,0代表星期天)
    week: weekPrefix + weekDayZh[date.getDay()], // 星期几，要显示周X，或者星期X，自己拼前缀
    hour: date.getHours(), // 时
    minute: date.getMinutes(), // 分
    second: date.getSeconds(), // 秒
    time: date,
    timestamp: date.getTime(), // 时间戳
    format(fmt = 'YYYY-MM-DD hh:mm:ss') {
      return formatDate(date, fmt)
    }
  }
}

/**
 * 日期格式化，根据规则生成不同间隔符、不同精度的日期字符串
 * @param {Data} value Date 日期
 * @param {String} fmt 格式化规则
 * @return {String}
 * @example
 * formatDate(new Date('2020-12-12'), 'YYYY/MM/DD') // 2020/12/12
 */
export function formatDate(value = new Date(), fmt = 'YYYY-MM-DD') {
  let date = parseDate(value)
  let ret
  let opt = {
    'y+|Y+': date.year, // 年
    'M+': date.month, // 月
    'd+|D+': date.date, // 日
    'h+|H+': date.hour, // 时
    'm+': date.minute, // 分
    's+': date.second // 秒
  }
  for (let k in opt) {
    ret = new RegExp('(' + k + ')').exec(fmt)
    if (ret) {
      fmt = fmt.replace(
        ret[1],
        ret[1].length == 1 ? opt[k] : opt[k].toString().padStart(ret[1].length, '0')
      )
    }
  }
  return fmt
}

/**
 * 计算剩余时间，将单位为秒的时间转换为日时分秒
 * @param {Number} timestamp 时间差，单位秒（s）
 * @param {Boolean} showDay 是否显示天数
 * @return {Object}
 * @example
 * calcuLeftTime(3600*60, true) // {day:2, hour: 12, minute: 0, second: 0}
 */
export function calcuLeftTime(timestamp, showDay = true) {
  const defaultValue = [0, 0, 0, 0]
  let [day, hour, minute, second] = defaultValue

  if (timestamp <= 0) return defaultValue

  day = Math.floor(timestamp / (60 * 60 * 24))
  hour = Math.floor(timestamp / (60 * 60)) - day * 24
  minute = Math.floor(timestamp / 60) - hour * 60 - day * 24 * 60
  second = Math.floor(timestamp) - day * 24 * 60 * 60 - hour * 60 * 60 - minute * 60

  day = day < 10 ? '0' + day : day
  let formatHour = showDay ? hour : Math.floor(timestamp / (60 * 60))
  formatHour = formatHour < 10 ? '0' + formatHour : formatHour
  minute = minute < 10 ? '0' + minute : minute
  second = second < 10 ? '0' + second : second

  return { day, hour: formatHour, minute, second }
}

export default {
  getWeekDayZh,
  parseDate,
  formatDate,
  calcuLeftTime
}
